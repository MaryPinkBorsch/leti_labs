#include <iostream>
#include <math.h>
#include <locale.h>

int proverka(int t, float H, float a, float x, float y)
{
    if ((t == 3 || t == 4) && (y > 0))
    {
        return 1;
    }
    if ((t == 1 || t == 2) && (y < 0))
    {
        return 1;
    }

    if ((t == 1) || (t == 4)) // первая четверть или четвертая четвреть
    {

        if (x > 0)
        {
            x = std::fmod(x, H);
        }
        else
        {
            x = H - std::fmod(std::fabs(x), H);
            // x = std::fmod(std::fabs(x), H);
        }
        // обрабатываем отрицательные значения y (вариант с отражением фигуры относительно оси Х)
        y = std::fabs(y);

        if (H < std::fabs(y))
        {
            return 1;
        }
        if (H == 0 && a == 0)
        {
            if (y == 0)
            {
                return 0;
            }
            else
            {
                return 1;
            }
        }
        if (H != 0 && a == 0)
        {
            if ((y <= H) && (x == H / 2))
            {
                return 0;
            }

            if ((0 <= x <= H / 2) && (y == H / 2))
            {
                return 0;
            }
            else
            {
                return 1;
            }
        }

        if (H == a && a != 0)
        {
            if ((x <= H) && (y == x))
            {
                return 0;
            }
            if ((0 <= x <= H / 2) && (y == H - x) && (H / 2 <= y <= H))
            {
                return 0;
            }
            else
            {
                return 1;
            }
        }

        // Блок 1 = попасть в закрашенную область:
        //      попасть в зеленую или!!!!
        if ((x >= (H / 2.0 - a / 2.0)) && (x <= (H / 2.0)) && (y <= (H / 2.0 - a / 2.0)) && y >= 0) // входит в зеленый прямоугольник
        {
            // надо убедиться что не входит в треугольничек y = k*x + b, где b == - (H/2 - a/2), k == 1
            if (y >= (x + -1 * (H / 2.0 - a / 2.0)))
            {
                return 0;
            }
        }
        //      попасть в красную или
        if ((x >= (H / 2.0)) && (x <= (H / 2.0 + a / 2.0)) && ((y <= H) && (y >= (H / 2.0)))) // входит в красный прямоугольник
        {
            // надо убедиться точка попадает в закрашенную область, т.е. лежит
            // между  y = k1*x + b1 и y = k2*x + b2 где k1 = 1, b1 = 0 а k2 = 1 и b2 = H / 2 - a/2
            if ((y <= x + (H / 2.0 - a / 2.0)) && (y >= x))
            {
                return 0;
            }
        }
        //      попасть в серую (мб тут нужно указать огранич на У, щас попробую!!!!)
        if ((x >= 0) && (x <= H / 2) && (y >= H / 2.0 - a / 2.0) && (y <= H / 2.0 + a / 2.0))
        {
            if (((x > H / 2.0 - a / 2.0) && (x < H / 2)) && (y > -1 * x + H))
            {
                return 1;
            }
            if (((x > 0) && (x < a / 2)) && ((y > x + (H / 2.0 - a / 2.0)) && (y < -1 * x + H / 2.0 + a / 2.0)))
            {
                return 1;
            }
            return 0;
        }

        return 1;
    }
    else if ((t == 2) || (t == 3)) // вторая четверть или третья четверть///////////////////////////////////////////////
    {
        if (x > 0)
        {
            x = std::fmod(x, H);
        }
        else
        {
            x = H - std::fmod(std::fabs(x), H);
            // std::cout << "teper x   " << x;
        }
        y = std::fabs(y);
        if (H < std::fabs(y))
        {
            return 1;
        }
        if (H == 0 && a == 0)
        {
            if (y == 0)
            {
                return 0;
            }
            else
            {
                return 1;
            }
        }
        if (H != 0 && a == 0)
        {
            if ((y <= H) && (x == H / 2))
            {
                return 0;
            }

            if ((H / 2 <= x <= H) && (y == H / 2))
            {
                return 0;
            }
            else
            {
                return 1;
            }
        }
        if (H == a && a != 0)
        {
            if ((0 <= x <= H) && (y == -1 * x + H) && (y <= H))
            {
                return 0;
            }
            if ((H / 2 <= x <= H) && (y == x) && (H / 2 <= y <= H))
            {
                return 0;
            }
            else
            {
                return 1;
            }
        }
        if ((H / 2 + a / 2 < x <= H) && (y > H / 2 + a / 2) && (y < H / 2 - a / 2))
        {
            return 1;
        }
        // Блок 1 = попасть в закрашенную область :
        //      попасть в зеленую или
        if ((x > (H / 2.0 - a / 2.0)) && (x < (H / 2.0)) && (y < (H / 2.0 - a / 2.0))) // входит в зеленый прямоугольник
        {
            // надо убедиться что не входит в треугольничек y = k*x + b, где b == - (H/2 - a/2), k == 1
            if (y > x + -1 * (H / 2.0 - a / 2.0))
            {
                return 1;
            }
        }

        //      попасть в красную или
        if ((x >= H / 2.0) && (x <= H / 2.0 + a / 2.0) && ((y <= H) && (y >= H / 2.0))) // входит в красный прямоугольник
        {
            // надо убедиться точка попадает в закрашенную область, т.е. лежит
            // между  y = k1*x + b1 и y = k2*x + b2 где k1 = 1, b1 = 0 а k2 = 1 и b2 = H / 2 - a/2
            if ((y < x + (H / 2.0 - a / 2.0)) && (y > x))
            {
                return 1;
            }
        }

        //      попасть в серую (мб тут нужно указать огранич на У, щас попробую!)
        if ((x >= 0) && (x <= H / 2) && (y >= H / 2.0 - a / 2.0) && y <= H / 2.0 + a / 2.0)
        {
            if (((x >= (H / 2.0 - a / 2.0)) && (x <= H / 2)) && (y >= (-1 * x + H)))
            {
                return 0;
            }
            else
            {
                return 1;
            }
        }

        // попадание в верхний лепесток
        if ((x >= H / 2 - a / 2) && (x <= H / 2) && (H / 2 + a / 2 <= y <= H))
        {
            if (y <= -1 * x + (H + H / 2 - a / 2))
            {
                return 0;
            }
            else
            {
                return 1;
            }
        }

        // попадание в нижний лепесток (малиновый)
        if (((H / 2) <= x <= H / 2 + a / 2) && (y <= H / 2))
        {
            if ((y >= -1 * x + H / 2 + a / 2) && (y <= H / 2))
            {
                return 0;
            }
            else
            {
                return 1;
            }
        }

        // обработка правого лепестка
        // siniy punktir
        if ((H / 2 <= x <= H) && (H / 2 <= y <= H / 2 + a / 2))
        {
            if ((y <= x) && (y >= (x - (H / 2 - a / 2))))
            {
                return 0;
            }
            if ((H - a / 2 < x <= H) && (H < y < H / 2 + a / 2) && (y < x + a / 2 - H / 2))
            {
                return 1;
            }
            else
            {
                return 1;
            }
        }

        // sinya tochka
        if ((H / 2 + a / 2 <= x <= H) && (H / 2 - a / 2 <= y <= H / 2))
        {
            if (y <= -1 * x + H + H / 2 - a / 2)
            {
                return 0;
            }
            else
            {
                return 1;
            }
            if ((H - a / 2 < x <= H) && (H < y < H / 2 + a / 2) && (y > -1 * x + H + H / 2 - a / 2))
            {
                return 1;
            }
        }

        //////////////////////////
        if ((H - a / 2 <= x <= H) && (y > -1 * x + H + H / 2 - a / 2) && (y < x + a / 2 - H / 2) && (y > H / 2 - a / 2) && (y < H / 2 + a / 2))
        {
            return 1;
        }
        if (H / 2 + a / 2 < x <= H)
        {
            return 1;
        }
        /////////////////////////////

        return 1;
    }
    return -1;
}

void Test()
{
    if (proverka(1, 10, 5, 4, 2) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ 1!" << std::endl;
    if (proverka(1, 10, 5, 4, 3) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ 2!" << std::endl;
    if (proverka(1, 10, 5, 14, 2) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ 3!" << std::endl;
    if (proverka(1, 10, 5, 9, 1) == 0) // не должно принадлежать
        std::cout << "НЕ РАБОТАЕТ 4!" << std::endl;
    if (proverka(2, 10, 5, -33, 5) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 5" << std::endl;
    if (proverka(2, 10, 5, -9, 5) == 0) // не должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 6" << std::endl;
    if (proverka(4, 10, 2, -10004.9, -7) != 0) //  должно принадлежать
        std::cout << "НЕ РАБОТАЕТ 7!" << std::endl;
    if (proverka(1, 10, 5, 6, 5) == 0) // не должно принадлежать
        std::cout << "НЕ РАБОТАЕТ 8!" << std::endl;
    if (proverka(1, 10, 5, -36, 5) != 0) //  должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 9" << std::endl;
    if (proverka(2, 10, 5, -4.59, 3) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ 10!" << std::endl;
    if (proverka(2, 10, 5, -3, 9) == 0) // не должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 11" << std::endl;
    if (proverka(3, 10, 5, -14.5, -2) != 0) //  должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 12" << std::endl;
    if (proverka(3, 10, 5, -34.5, -2) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 13" << std::endl;
    if (proverka(3, 10, 5, -9, -9) == 0) // не должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 14" << std::endl;
    if (proverka(3, 10, 5, -94.5, -9) == 0) // не должно принадлежать
        std::cout << "НЕ РАБОТАЕТ 15!" << std::endl;
    if (proverka(4, 10, 5, 6, -7.59) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 16" << std::endl;
    if (proverka(4, 10, 5, 4.1, -2) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 17" << std::endl;
    if (proverka(4, 10, 5, 22, -2) == 0) // не должно принадлежать
        std::cout << "НЕ РАБОТАЕТ 18!" << std::endl;
    if (proverka(4, 10, 2, 4.9, -2) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ 19!" << std::endl;
    if (proverka(3, 10, 5, -3, -7.5) == 0) // не должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 20" << std::endl;
    if (proverka(3, 10, 5, -4, -3) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 21" << std::endl;
    if (proverka(4, 10, 2, 1005.5, -7.5) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 22" << std::endl;
    if (proverka(1, 10, 2, 4.9, 4) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 23" << std::endl;
    if (proverka(1, 10, 2, 10000000000000004.12, 4) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ1! 24" << std::endl;
    if (proverka(1, 10, 2, -10000000000000004.12, 4) == 0) // ne должно принадлежать
        std::cout << "НЕ РАБОТАЕТ 25!" << std::endl;
    if (proverka(1, 10, 2, -4.12, 4) == 0) // ne должно принадлежать
        std::cout << "НЕ РАБОТАЕТ 26!" << std::endl;
    if (proverka(1, 10, 2, -1003.36, 5) == 0) // не должно принадлежать
        std::cout << "НЕ РАБОТАЕТ 27!" << std::endl;
    if (proverka(1, 10, 2, 10026, 7) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ 28!" << std::endl;
    if (proverka(1, 10, 2, 95.6, 5.6) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 29" << std::endl;
    if (proverka(1, 10, 2, -2005.6, 4.4) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 30" << std::endl;
    if (proverka(1, 10, 2, -5.6, 4.4) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 31" << std::endl;
    if (proverka(1, 10, 2, 110.4, 4) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 32" << std::endl;
    if (proverka(2, 10, 2, 15.5, 5.5) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 33" << std::endl;
    if (proverka(2, 10, 2, 44, 7) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 34" << std::endl;
    if (proverka(2, 10, 2, 77, 5.25) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 35" << std::endl;
    if (proverka(2, 10, 2, -10003.5, 4.78) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 36" << std::endl;
    if (proverka(2, 10, 2, -105.9, 3) == 0) // ne должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 37" << std::endl;
    if (proverka(2, 10, 2, -9.9, 5) == 0) // ne должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 38" << std::endl;
    if (proverka(2, 10, 2, -10006, 6) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 39" << std::endl;
    if (proverka(2, 10, 2, -100026, 8.84) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 40" << std::endl;
    if (proverka(2, 10, 2, -10011, 5) != 0) //  должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 41" << std::endl;
    if (proverka(2, 10, 2, -205.6, 8) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 42" << std::endl;
    if (proverka(3, 10, 2, 5.6, -3) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 43" << std::endl;
    if (proverka(3, 10, 2, 27.1, -5.1) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 44" << std::endl;
    if (proverka(3, 10, 2, 4.3, -4.3) == 0) // ne должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 45" << std::endl;
    if (proverka(3, 10, 2, -3, -4.3) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 46" << std::endl;
    if (proverka(3, 10, 2, -1004.4, -3.9) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 47" << std::endl;
    if (proverka(3, 10, 2, -55.6, -8) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 48" << std::endl;
    if (proverka(3, 10, 2, 3, -5) == 0) // ne должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 49" << std::endl;
    if (proverka(3, 10, 2, -555.6, -3) == 0) // ne должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 50" << std::endl;
    if (proverka(3, 10, 2, 5.1, -5.1) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 51" << std::endl;
    if (proverka(3, 10, 2, -106, -3) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 52" << std::endl;
    if (proverka(3, 10, 2, -15.1, -4) == 0) // ne должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 53" << std::endl;
    if (proverka(3, 10, 2, -34.119, -8.1) == 0) // ne должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 54" << std::endl;
    if (proverka(3, 10, 2, -8.18, -5) == 0) // ne должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 55" << std::endl;
    if (proverka(4, 10, 2, 4.1, -0.5) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 56" << std::endl;
    if (proverka(4, 10, 2, 4.4, -3.9) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 57" << std::endl;
    if (proverka(4, 10, 2, 1003.4, -4) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 58" << std::endl;
    if (proverka(4, 10, 2, 103.8, -5) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 59" << std::endl;
    if (proverka(4, 10, 2, 55, -5) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 60" << std::endl;
    if (proverka(4, 10, 2, 5.109, -7) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 61" << std::endl;
    if (proverka(4, 10, 2, 10007.5, -4) == 0) // ne должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 62" << std::endl;
    if (proverka(4, 10, 2, 107.5, -4.9) == 0) // ne должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 63" << std::endl;
    if (proverka(4, 10, 2, -105.11, -5.2) == 0) // ne должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 64" << std::endl;
    if (proverka(4, 10, 2, -1004.3, -3) == 0) // ne должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 65" << std::endl;
    if (proverka(4, 10, 2, 1024.5, -8) == 0) // ne должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 66" << std::endl;
    if (proverka(4, 10, 2, 5.3, -5.3) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 67" << std::endl;
    if (proverka(4, 10, 2, -66, -7) == 0) // ne должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 68" << std::endl;
    if (proverka(4, 10, 2, 9.5, -5.101) == 0) // ne должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 69" << std::endl;
    if (proverka(4, 0, 0, -66, 0) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 70" << std::endl;
    if (proverka(2, 0, 0, -666948.3, 0) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 71" << std::endl;
    if (proverka(4, 5, 0, -2.5, -3) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 72" << std::endl;
    if (proverka(2, 5, 0, -5, 2) == 0) // ne должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 73" << std::endl;
    if (proverka(4, 5, 0, 1, -2.5) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 74" << std::endl;
    if (proverka(3, 5, 0, -11, -2.5) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 75" << std::endl;
    if (proverka(4, 0, 5, -66, 0) == 0) // ne должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 76" << std::endl;
    if (proverka(4, 4, 4, 3, -3) != 0) // должно принадлежать?
        std::cout << "НЕ РАБОТАЕТ! 77" << std::endl;
    if (proverka(4, 10, 2, 4, -4) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 78" << std::endl;
    if (proverka(4, 10, 2, 4.2, -4.2) != 0) // должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 79" << std::endl;

    if (proverka(2, 10, 2, -100.1, 4.9) == 0) // ne должно принадлежать
        std::cout << "НЕ РАБОТАЕТ! 999999" << std::endl;
}

int main(int argc, char *arv[])
{
    setlocale(LC_ALL, "Russian");

    Test();

    std::cout << "Приветствую! Это лабораторная работа №2 Калюжной М.И. группа 3352 Вариант 1_25_Б  начало работы 19.09.23, конец 10.10." << std::endl;
    // tut figura simwolami
    std::cout << "\n";

    std::cout << "                                  /@\\         /@|                               " << std::endl;
    std::cout << "                                  (&,#\\     /#*%#                               " << std::endl;
    std::cout << "                                  (&,  \\%%@/.,*%#                               " << std::endl;
    std::cout << "                                  (&,   .%,,*/*%#                               " << std::endl;
    std::cout << "                                  (&,   .%,*//*%#                               " << std::endl;
    std::cout << "                                  (&,   .&,*//*%#                               " << std::endl;
    std::cout << "                                  (&,   .&,*//*%#                               " << std::endl;
    std::cout << "                                  (&,   .&,*//*%#                               " << std::endl;
    std::cout << "                                  (&,   .&,*/**%#                               " << std::endl;
    std::cout << "                                  (&,   .&,*/,,%#                               " << std::endl;
    std::cout << "                                  (&,   .&,*//*%#                               " << std::endl;
    std::cout << "      \\&&&&%&&&%&&&&&&&&&&&&&&&&&&&&/   .&,**,/&&%&&&&&&&&&&&&&&&%&&%&&&&&%&/   " << std::endl;
    std::cout << "        \\#%,*///////*///////*/////*.,#@(.%.*&&,                        *@%/     " << std::endl;
    std::cout << "          \\#&(,*,///*///////////////*,./&@@(.                        /@#/       " << std::endl;
    std::cout << "          /%&(,,,//*//////*////*///****(@&@(.                        *&#\\       " << std::endl;
    std::cout << "        /%#.,**/////*///////////*/*,/%&*.%.,&&*                        ,@#\\     " << std::endl;
    std::cout << "      /%%%########################%&/*,*/%.   *&%#########################%%\\   " << std::endl;
    std::cout << "                                  (&///*/%.   .%#                               " << std::endl;
    std::cout << "                                  (&//**/%.   .%#                               " << std::endl;
    std::cout << "                                  (&///*/%.   .%#                               " << std::endl;
    std::cout << "                                  (&///*/%.   .%#                               " << std::endl;
    std::cout << "                                  (&///*/%.   .%#                               " << std::endl;
    std::cout << "                                  (&///*/%.   .%#                               " << std::endl;
    std::cout << "                                  (&///*/%.   .%#                               " << std::endl;
    std::cout << "                                  (&///*/%.   .%#                               " << std::endl;
    std::cout << "                                  (&/,,/&&@*  .%#                               " << std::endl;
    std::cout << "                                  (&*/&#.  (&(,%#                               " << std::endl;
    std::cout << "                                  /@&/       *&@#                               " << std::endl;
    std::cout << "                                  |/           \\|                               " << std::endl;

    int t;
    std::cout << "\n Данная фигура вписана в квадрат с высотой Н, все треуголики в фигуре равнобедренные, имеют основание а и боковые стороны, равные а/sqrt(2), причем (H>=a)." << std::endl;
    std::cout << "Введенные значения а и Н должны удовлетворять таким условиям: H >= a >= 0 \n";
    std::cout << "\n";
    std::cout << "Введите пожалуйста номер четверти, в которой находится фигура:" << std::endl;
    std::cin >> t;
    std::cout << "P.S. Для рисунков типа 3 и 4 четверти нужно ввести отрицательную координату У (у<0)" << std::endl;
    if (t > 4 || t < 1)
    {
        std::cout << " Введенные значения не удовлетворяют начальным условиям.";
        return 1;
    }
    std::cout << "\n";
    std::cout << "Номер четверти, в которой находится фигура: " << t << std::endl;
    std::cout << "\n";
    std::cout << "Введите H, a, x, y:" << std::endl;

    // считать параметры с пользователя: H, a, x, y (float)
    float H, a, x, y;
    std::cin >> H;
    std::cin >> a;
    std::cin >> x;
    std::cin >> y;

    // проверка введенных значений на то что H >= a >= 0
    if (!((H >= a) && (a >= 0)))
    {
        std::cout << " Введенные значения не удовлетворяют начальным условиям.";
        return 1;
    }

    int res = proverka(t, H, a, x, y);

    if (res == 0)
        std::cout << " Данная точка принадлежит oдной из заштрихованных областей. :)";
    else
        std::cout << " Данная точка не принадлежит ни одной из заштрихованных областей.";

    return 0;
}

/*


    /////////////////////////////////////////////////////////////////////////////////////////
    tut conturi

     if ((H != 0 && a != 0) && (a != 0) && (H != a))
 {
     if ((0 <= x <= H / 2 - a / 2) && ((y == H / 2 - a / 2) || (y == H / 2 + a / 2))
     {
         std::cout << " Данная точка  принадлежит одной из заштрихованных областей :)";
             return 0;
     }
    if (( H / 2 + a / 2 <= x <= H) && ((y == H / 2 - a / 2) || (y == H / 2 + a / 2))
     {
         std::cout << " Данная точка  принадлежит одной из заштрихованных областей :)";
             return 0;
     }
    if ((H / 2 + a / 2 <= y <= H ) && ((x == H / 2 + a / 2 ) || (x ==H / 2 - a / 2))
     {
         std::cout << " Данная точка  принадлежит одной из заштрихованных областей :)";
             return 0;
     }
    if ((0 <= y <= H / 2 - a / 2 ) && ((x == H / 2 + a / 2 ) || (x ==H / 2 - a / 2))
     {
         std::cout << " Данная точка  принадлежит одной из заштрихованных областей :)";
             return 0;
     }
    if ((a/2 <= y <= H - a / 2 ) && ((x == H / 2 ))
     {
         std::cout << " Данная точка  принадлежит одной из заштрихованных областей :)";
             return 0;
     }
    if (H / 2 - a / 2 <= y <= H / 2 + a / 2 ) && (H / 2 - a / 2 <= x <= H / 2 + a / 2 ) && (y = x)
     {
         std::cout << " Данная точка  принадлежит одной из заштрихованных областей :)";
             return 0;
     }
    if (H / 2 - a / 2 <= y <= H / 2 + a / 2 ) && (H / 2 - a / 2 <= x <= H / 2 + a / 2 ) && (y = -1*x + H)
     {
         std::cout << " Данная точка  принадлежит одной из заштрихованных областей :)";
             return 0;
     }


    if (H / 2 - a / 2 <= y <= H / 2) && (0 <= x <= a / 2 ) && (y = x + H / 2 - a / 2)
     {
         std::cout << " Данная точка  принадлежит одной из заштрихованных областей :)";
             return 0;
     }

    if (H - a / 2 <= y <= H ) && (H/2 <= x <= H / 2 + a / 2 ) && (y = x + H / 2 - a / 2)
     {
         std::cout << " Данная точка  принадлежит одной из заштрихованных областей :)";
             return 0;
     }

    if (0 <= y <= a / 2 ) && (H/2 - a/2 <= x <= H / 2) && (y = x - H / 2 + a / 2)
     {
         std::cout << " Данная точка  принадлежит одной из заштрихованных областей :)";
             return 0;
     }

    if (H/2 <= y <= H/2 + a / 2 ) && (H - a/2 <= x <= H ) && (y = x - H / 2 + a / 2)
     {
         std::cout << " Данная точка  принадлежит одной из заштрихованных областей :)";
             return 0;
     }

    if (H / 2 <= y <= H / 2 + a/2) && (0 <= x <= a / 2 ) && (y = -1*x + H / 2 + a / 2)
     {
         std::cout << " Данная точка  принадлежит одной из заштрихованных областей :)";
             return 0;
     }

    if (H / 2 <= x <= H / 2 + a/2) && (0 <= y <= a / 2 ) && (y = -1*x + H / 2 + a / 2)
     {
         std::cout << " Данная точка  принадлежит одной из заштрихованных областей :)";
             return 0;
     }

    if (H / 2 - a/2 <= x <= H / 2 ) && (H - a/2 <= y <= H ) && (y = -1*x + H + H / 2 - a / 2)
     {
         std::cout << " Данная точка  принадлежит одной из заштрихованных областей :)";
             return 0;
     }

    if (H / 2 - a/2 <= y <= H / 2 ) && (H - a/2 <= x <= H ) && (y = -1*x + H + H / 2 - a / 2)
     {
         std::cout << " Данная точка  принадлежит одной из заштрихованных областей :)";
             return 0;
     }
 }
*/