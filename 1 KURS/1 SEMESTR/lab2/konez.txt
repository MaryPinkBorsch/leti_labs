#include <iostream>
#include <math.h>
#include <locale.h>

// создадим функцию для вычисления остатка от деления чисел с плавающей запятой
/*
float float_mod(float m, float b)
{
    // пример
    // return m - b * (std::floorf(m / b));
    //
    // m = 7,5
    // b = 2
    // m/b = 3.75
    // floor(m/b) = 3
    // b*floor(m/b) = 6
    // m - b*floor(m/b) = 1.5
    return m - b * (std::floorf(m / b));
} */

int main(int argc, char *arv[])
{
    setlocale(LC_ALL, "Russian");

    std::cout << "Приветвую! Это лабораторная работа №2 Калюжной М.И. группа 3352 Вариант 1_25_Б  начало работы 19.09.23 конец 28.09." << std::endl;
    // tut figura simwolami
    std::cout << "\n";

    std::cout << "                                  /@\\         /@|                               " << std::endl;
    std::cout << "                                  (&,#\\     /#*%#                               " << std::endl;
    std::cout << "                                  (&,  \\%%@/.,*%#                               " << std::endl;
    std::cout << "                                  (&,   .%,,*/*%#                               " << std::endl;
    std::cout << "                                  (&,   .%,*//*%#                               " << std::endl;
    std::cout << "                                  (&,   .&,*//*%#                               " << std::endl;
    std::cout << "                                  (&,   .&,*//*%#                               " << std::endl;
    std::cout << "                                  (&,   .&,*//*%#                               " << std::endl;
    std::cout << "                                  (&,   .&,*/**%#                               " << std::endl;
    std::cout << "                                  (&,   .&,*/,,%#                               " << std::endl;
    std::cout << "                                  (&,   .&,*//*%#                               " << std::endl;
    std::cout << "      \\&&&&%&&&%&&&&&&&&&&&&&&&&&&&&/   .&,**,/&&%&&&&&&&&&&&&&&&%&&%&&&&&%&/   " << std::endl;
    std::cout << "        \\#%,*///////*///////*/////*.,#@(.%.*&&,                        *@%/     " << std::endl;
    std::cout << "          \\#&(,*,///*///////////////*,./&@@(.                        /@#/       " << std::endl;
    std::cout << "          /%&(,,,//*//////*////*///****(@&@(.                        *&#\\       " << std::endl;
    std::cout << "        /%#.,**/////*///////////*/*,/%&*.%.,&&*                        ,@#\\     " << std::endl;
    std::cout << "      /%%%########################%&/*,*/%.   *&%#########################%%\\   " << std::endl;
    std::cout << "                                  (&///*/%.   .%#                               " << std::endl;
    std::cout << "                                  (&//**/%.   .%#                               " << std::endl;
    std::cout << "                                  (&///*/%.   .%#                               " << std::endl;
    std::cout << "                                  (&///*/%.   .%#                               " << std::endl;
    std::cout << "                                  (&///*/%.   .%#                               " << std::endl;
    std::cout << "                                  (&///*/%.   .%#                               " << std::endl;
    std::cout << "                                  (&///*/%.   .%#                               " << std::endl;
    std::cout << "                                  (&///*/%.   .%#                               " << std::endl;
    std::cout << "                                  (&/,,/&&@*  .%#                               " << std::endl;
    std::cout << "                                  (&*/&#.  (&(,%#                               " << std::endl;
    std::cout << "                                  /@&/       *&@#                               " << std::endl;
    std::cout << "                                  |/           \\|                               " << std::endl;

    float t;
    std::cout << "\n Данная фигура вписана в квадрат с высотой Н, все треуголики в фигуре равнобедренные, имеют основание а и боковые стороны, равные а/sqrt(2), причем (H>=a)." << std::endl;
    std::cout << "Введенные значения а и Н должны удовлетворять таким условиям: H >= a >= 0 \n";
    std::cout << "\n";
    std::cout << "Введите пожалуйста номер четверти, в которой находится фигура:" << std::endl;
    std::cin >> t;
    if (t > 4 || t < 1)
    {
        std::cout << " Введенные значения не удовлетворяют начальным условиям.";
        return 1;
    }
    std::cout << "\n";
    std::cout << "Номер четверти, в которой находится фигура: " << t << std::endl;
    std::cout << "\n";
    std::cout << "Введите H, a, x, y:" << std::endl;

    // считать параметры с пользователя: H, a, x, y (float)
    float H, a, x, y;
    std::cin >> H;
    std::cin >> a;
    std::cin >> x;
    std::cin >> y;

    // проверка введенных значений на то что H >= a >= 0
    if (!((H >= a) && (a >= 0)))
    {
        std::cout << " Введенные значения не удовлетворяют начальным условиям.";
        return 1;
    }

    // начинаю обработку 2 и 3 четвертей

    if (t == 3 || t == 2)
    {
        if (x > 0)
        {
            x = std::fmod(x, H);
        }
        else
        {
            x = H - std::fmod(std::fabs(x), H);
        }
        y = std::fabs(y);
        if (H < std::fabs(y))
        {
            std::cout << " Данная точка не принадлежит ни одной из заштрихованных областей.";
            return 1;
        }
        if (H == 0 && a == 0)
        {
            if (y == 0)
            {
                std::cout << " Данная точка  принадлежит одной из заштрихованных областей :)";
                return 0;
            }
            else
            {
                std::cout << " Данная точка не принадлежит ни одной из заштрихованных областей.";
                return 1;
            }
        }
        if (H != 0 && a == 0)
        {
            if ((y <= H) && (x == H / 2))
            {
                std::cout << " Данная точка  принадлежит одной из заштрихованных областей :)";
                return 0;
            }

            if ((H / 2 <= x <= H) && (y == H / 2))
            {
                std::cout << " Данная точка  принадлежит одной из заштрихованных областей :)";
                return 0;
            }
            else
            {
                std::cout << " Данная точка не принадлежит ни одной из заштрихованных областей.";
                return 1;
            }
        }
        if (H == a && a != 0)
        {
            if ((0 <= x <= H) && (y == -1 * x + H) && (y <= H))
            {
                std::cout << " Данная точка  принадлежит одной из заштрихованных областей :)";
                return 0;
            }
            if ((H / 2 <= x <= H) && (y == x) && (H / 2 <= y <= H))
            {
                std::cout << " Данная точка  принадлежит одной из заштрихованных областей :)";
                return 0;
            }
            else
            {
                std::cout << " Данная точка не принадлежит ни одной из заштрихованных областей.";
                return 1;
            }
        }

        // Блок 1 = попасть в закрашенную область :
        //      попасть в зеленую или
        if ((x > (H / 2.0 - a / 2.0)) && (x < (H / 2.0)) && (y < (H / 2.0 - a / 2.0))) // входит в зеленый прямоугольник
        {
            // надо убедиться что не входит в треугольничек y = k*x + b, где b == - (H/2 - a/2), k == 1
            if (y > x + -1 * (H / 2.0 - a / 2.0))
            {
                std::cout << " Данная точка не принадлежит ни одной из заштрихованных областей.";
                return 1;
            }
        }

        //      попасть в красную или
        if ((x > H / 2.0) && (x < H / 2.0 + a / 2.0) && ((y < H) && (y > H / 2.0))) // входит в красный прямоугольник
        {
            // надо убедиться точка попадает в закрашенную область, т.е. лежит
            // между  y = k1*x + b1 и y = k2*x + b2 где k1 = 1, b1 = 0 а k2 = 1 и b2 = H / 2 - a/2
            if ((y < x + (H / 2.0 - a / 2.0)) && (y > x))
            {
                std::cout << " Данная точка не принадлежит ни одной из заштрихованных областей.";
                return 0;
            }
        }

        //      попасть в серую (мб тут нужно указать огранич на У, щас попробую!)
        if ((x > 0) && (x < H / 2) && (y > H / 2.0 - a / 2.0) && y < H / 2.0 + a / 2.0)
        {
            if (((x > H / 2.0 - a / 2.0) && (x < H / 2)) && (y > -1 * x + H))
            {
                std::cout << " Данная точка  принадлежит одной из заштрихованных областей :)";
                return 0;
            }
            else
            {
                std::cout << " Данная точка не принадлежит ни одной из заштрихованных областей.";
                return 1;
            }

            if (((x > 0) && (x < a / 2)) && ((y > x + (H / 2.0 - a / 2.0)) && (y < -1 * x + H / 2.0 + a / 2.0)))
            {
                std::cout << " Данная точка не принадлежит ни одной из заштрихованных областей.";
                return 1;
            }
        }

        // попадание в верхний лепесток
        if ((x >= H / 2 - a / 2) && (x <= H / 2) && (H / 2 + a / 2 <= y <= H))
        {
            if (y <= -1 * x + (H + H / 2 - a / 2))
            {
                std::cout << " Данная точка  принадлежит одной из заштрихованных областей :)";
                return 0;
            }
            else
            {
                std::cout << " Данная точка не принадлежит ни одной из заштрихованных областей.";
                return 1;
            }
        }

        // попадание в нижний лепесток (малиновый)
        if ((H / 2 <= x <= H / 2 + a / 2) && (y < H / 2))
        {
            if (y >= -1 * x + H / 2 + a / 2)
            {
                std::cout << " Данная точка  принадлежит одной из заштрихованных областей :)";
                return 0;
            }
            else
            {
                std::cout << " Данная точка не принадлежит ни одной из заштрихованных областей.";
                return 1;
            }
        }

        // обработка правого лепестка
        // siniy punktir
        if ((H / 2 <= x <= H) && (H / 2 <= y <= H / 2 + a / 2))
        {
            if ((y <= x) && (y >= x - (H / 2 - a / 2)))
            {
                std::cout << " Данная точка  принадлежит одной из заштрихованных областей :)";
                return 0;
            }
            else
            {
                std::cout << " Данная точка не принадлежит ни одной из заштрихованных областей.";
                return 1;
            }
        }

        // sinya tochka
        if ((H / 2 + a / 2 <= x <= H) && (H / 2 - a / 2 <= y <= H / 2))
        {
            if (y <= -1 * x + H + H / 2 - a / 2)
            {
                std::cout << " Данная точка  принадлежит одной из заштрихованных областей :)";
                return 0;
            }
            else
            {
                std::cout << " Данная точка не принадлежит ни одной из заштрихованных областей.";
                return 1;
            }
        }

        std::cout << " Данная точка не принадлежит ни одной из заштрихованных областей.";
        return 1;
    }

    // обработка 2 и 3 четыертей завершена, далее код предназначен для 1 и 4 четвертей
    //
    //               :)
    //
    //  притащить Х и У (нормализовать) в первую фигуру ("+")
    //  используем функцию fmod для нормализации Х, для отрицательных чисел H - fmod(fabs)
    if (x > 0)
    {
        x = std::fmod(x, H);
    }
    else
    {
        x = H - std::fmod(std::fabs(x), H);
    }
    // обрабатываем отрицательные значения y (вариант с отражением фигуры относительно оси Х)
    y = std::fabs(y);

    if (H < std::fabs(y))
    {
        std::cout << " Данная точка не принадлежит ни одной из заштрихованных областей.";
        return 1;
    }
    if (H == 0 && a == 0)
    {
        if (y == 0)
        {
            std::cout << " Данная точка  принадлежит одной из заштрихованных областей :)";
            return 0;
        }
        else
        {
            std::cout << " Данная точка не принадлежит ни одной из заштрихованных областей.";
            return 1;
        }
    }
    if (H != 0 && a == 0)
    {
        if ((y <= H) && (x == H / 2))
        {
            std::cout << " Данная точка  принадлежит одной из заштрихованных областей :)";
            return 0;
        }

        if ((0 <= x <= H / 2) && (y == H / 2))
        {
            std::cout << " Данная точка  принадлежит одной из заштрихованных областей :)";
            return 0;
        }
        else
        {
            std::cout << " Данная точка не принадлежит ни одной из заштрихованных областей.";
            return 1;
        }
    }

    if (H == a && a != 0)
    {
        if ((x <= H) && (y == x))
        {
            std::cout << " Данная точка  принадлежит одной из заштрихованных областей :)";
            return 0;
        }
        if ((0 <= x <= H / 2) && (y == H - x) && (H / 2 <= y <= H))
        {
            std::cout << " Данная точка  принадлежит одной из заштрихованных областей :)";
            return 0;
        }
        else
        {
            std::cout << " Данная точка не принадлежит ни одной из заштрихованных областей.";
            return 1;
        }
    }

    // Блок 1 = попасть в закрашенную область:
    //      попасть в зеленую или
    if ((x > (H / 2.0 - a / 2.0)) && (x < (H / 2.0)) && (y < (H / 2.0 - a / 2.0))) // входит в зеленый прямоугольник
    {
        // надо убедиться что не входит в треугольничек y = k*x + b, где b == - (H/2 - a/2), k == 1
        if (y > x + -1 * (H / 2.0 - a / 2.0))
        {
            std::cout << " Данная точка  принадлежит одной из заштрихованных областей :)";
            return 0;
        }
    }
    //      попасть в красную или
    if ((x > H / 2.0) && (x < H / 2.0 + a / 2.0) && ((y < H) && (y > H / 2.0))) // входит в красный прямоугольник
    {
        // надо убедиться точка попадает в закрашенную область, т.е. лежит
        // между  y = k1*x + b1 и y = k2*x + b2 где k1 = 1, b1 = 0 а k2 = 1 и b2 = H / 2 - a/2
        if ((y < x + (H / 2.0 - a / 2.0)) && (y > x))
        {
            std::cout << " Данная точка  принадлежит одной из заштрихованных областей :)";
            return 0;
        }
    }
    //      попасть в серую (мб тут нужно указать огранич на У, щас попробую!)
    if ((x > 0) && (x < H / 2) && (y > H / 2.0 - a / 2.0) && y < H / 2.0 + a / 2.0)
    {
        if (((x > H / 2.0 - a / 2.0) && (x < H / 2)) && (y > -1 * x + H))
        {
            std::cout << " Данная точка не принадлежит ни одной из заштрихованных областей.";
            return 1;
        }
        if (((x > 0) && (x < a / 2)) && ((y > x + (H / 2.0 - a / 2.0)) && (y < -1 * x + H / 2.0 + a / 2.0)))
        {
            std::cout << " Данная точка не принадлежит ни одной из заштрихованных областей.";
            return 1;
        }
        std::cout << " Данная точка  принадлежит одной из заштрихованных областей :)";
        return 0;
    }
    //
    // или
    // Блок 2 = попасть в контуры
    //      положить все отрезки контура в массив и перебрать

    std::cout << " Данная точка не принадлежит ни одной из заштрихованных областей.";
    return 1;
}

/* Приветвую!Это лабораторная работа №2 Калюжной М.И.Вариант 1_25_Б  начало работы 19.09.23
Данная фигура вписана в квадрат с высотой Н, все треуголики в фигуре равнобедренные, имеют основание а и боковые стороны, равные а / sqrt(2), причем(H > a)
Введите H, a, x, y:
2
0.1
0.5
0.495
Данная точка  принадлежит одной из заштрихованных областей : )

Приветвую! Это лабораторная работа №2 Калюжной М.И. Вариант 1_25_Б  начало работы 19.09.23
 Данная фигура вписана в квадрат с высотой Н, все треуголики в фигуре равнобедренные, имеют основание а и боковые стороны, равные а/sqrt(2), причем (H>a)
Введите H, a, x, y:
5
3
7
99
 Данная точка не принадлежит ни одной из заштрихованных областей.
*/
